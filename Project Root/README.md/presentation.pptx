
#### `models/segmentation_model.py`
```python
import torch
from torchvision import models, transforms
import cv2
from PIL import Image
import numpy as np

class SegmentationModel:
    def __init__(self):
        self.model = models.detection.maskrcnn_resnet50_fpn(pretrained=True)
        self.model.eval()
        self.transform = transforms.Compose([
            transforms.ToTensor()
        ])

    def segment(self, image_path):
        image = Image.open(image_path).convert("RGB")
        image_tensor = self.transform(image).unsqueeze(0)
        with torch.no_grad():
            predictions = self.model(image_tensor)
        
        masks = predictions[0]['masks']
        return masks.cpu().numpy()

def visualize_segmentation(image_path, masks, output_path):
    image = cv2.imread(image_path)
    for i in range(masks.shape[0]):
        mask = masks[i, 0]
        mask = (mask > 0.5).astype(np.uint8) * 255
        contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        cv2.drawContours(image, contours, -1, (0, 255, 0), 2)
    
    cv2.imwrite(output_path, image)

if __name__ == "__main__":
    model = SegmentationModel()
    masks = model.segment("data/input_images/sample.jpg")
    visualize_segmentation("data/input_images/sample.jpg", masks, "data/output/segmented_image.jpg")
